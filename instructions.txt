Voici le PROMPT ULTIME fusionné, intégrant l’ensemble des éléments essentiels issus des deux versions, afin de garantir une reproduction ultra fidèle du jeu Pac-Man original en termes d’architecture, de gameplay, de performances et de fidélité historique.

PROMPT ULTIME pour l’Implémentation de Pac-Man

Contexte & Objectif

Développer une réplique parfaitement fidèle du jeu Pac-Man original de 1980, en utilisant l’IDE Cursor avec l’assistant Claude 3.5 Sonnet (ou tout autre environnement de développement adapté). Le code devra être hautement maintenable, refactorisé, optimisé et portable sur tout système (Windows, macOS, Linux).
Le jeu doit être compilable et fonctionner sans erreur sur n’importe quel ordinateur, avec un exécutable ou installateur prêt à l’emploi pour l’utilisateur final (aucune manipulation technique requise).
Le projet intégrera une gestion efficace des entrées clavier, un rendu graphique fidèle et performant, une synchronisation précise (60 FPS), ainsi qu’une reproduction exacte des bruitages et musiques originaux.

1. Architecture et Organisation du Projet

Structure Modulaire & Organisation des Fichiers
	•	Séparation des responsabilités :
	•	Entités : Pac-Man, fantômes (Blinky, Pinky, Inky, Clyde), labyrinthe, points, fruits, etc.
	•	Services : Gestion des entrées, rendu graphique, son.
	•	Gestionnaires : ResourceManager (chargement et optimisation des assets pour éviter les fuites mémoire), InputHandler, SoundManager.
	•	Utilitaires : Structures mathématiques (Vector2D), Timer pour la gestion du temps et de la synchronisation.
	•	Exemple d’Organisation (en C++ ou autre langage) :

src/
├── main.cpp              # Point d'entrée et boucle de jeu principale
├── core/
│   ├── Game.hpp/cpp      # Gestion globale du jeu, initialisation, boucle principale et états (menu, pause, jeu, game over)
│   ├── GameState.hpp/cpp # Définition des états du jeu
│   └── Config.hpp        # Constantes et configurations (timings, vitesses, dimensions du labyrinthe, etc.)
├── entities/
│   ├── Player.hpp/cpp    # Implémentation de Pac-Man : mouvement, collisions, animations
│   ├── Ghost.hpp/cpp     # Classe de base des fantômes et comportements communs
│   ├── Blinky.hpp/cpp    # Fantôme rouge (incluant Cruise Elroy)
│   ├── Pinky.hpp/cpp     # Fantôme rose (avec reproduction exacte du « Pinky Bug »)
│   ├── Inky.hpp/cpp      # Fantôme bleu
│   └── Clyde.hpp/cpp     # Fantôme orange
├── world/
│   ├── Maze.hpp/cpp      # Labyrinthe (grille 28x31 cases, murs, couloirs, points, super points, tunnels)
│   └── Cell.hpp/cpp      # Types de cases (mur, couloir, point, tunnel, etc.)
├── managers/
│   ├── InputHandler.hpp/cpp    # Gestion centralisée des entrées clavier
│   ├── SoundManager.hpp/cpp    # Gestion des bruitages et de la musique (chargement asynchrone, priorités, synchronisation)
│   └── ResourceManager.hpp/cpp # Chargement et optimisation des assets (images, sons, etc.)
└── utils/
    ├── Vector2D.hpp/cpp  # Structures mathématiques pour la gestion des positions et déplacements
    └── Timer.hpp/cpp     # Gestion du temps, synchronisation (ciblant 60 FPS)



Documentation et README
	•	Fournir un fichier README détaillé incluant :
	•	Instructions de compilation et dépendances (Makefile, CMake ou script de build multiplateforme)
	•	Description complète de l’architecture et des modules
	•	Diagrammes UML illustrant les interactions entre les classes
	•	Guide d’utilisation et notes sur la maintenance du code
	•	Commenter le code de manière claire et professionnelle en respectant les conventions du langage utilisé.

2. Spécifications Techniques Détaillées

Structure du Jeu & Mécaniques de Base
	•	Labyrinthe :
	•	Grille de 28x31 cases
	•	Types de cases : mur, couloir, point (10 pts), super point (50 pts), tunnel, case vide
	•	Positionnement spécifique des tunnels (ex. ligne 14)
	•	Pac-Man :
	•	Déplacement fluide dans 4 directions, avec gestion de l’anticipation du virage
	•	Vitesse de base : environ 80% case/frame, 60% dans les tunnels
	•	Pause de collecte de 2-3 frames pour une animation fluide
	•	Système de Points et Scoring :
	•	Pac-gomme : 10 points, Super pac-gomme : 50 points
	•	Points bonus pour la capture des fantômes (200/400/800/1600 points) et pour les fruits (100-5000 points selon type)
	•	Durées de vulnérabilité des fantômes variant selon le niveau (ex. 6 secondes au niveau 1, diminuant progressivement)

Mécaniques de Mouvement et Collisions
	•	Détection et Gestion des Collisions :
	•	Collision basée sur des hitboxes “pixel-perfect” ou “tile-perfect” (rayon légèrement inférieur à la demi-largeur d’une case)
	•	Calcul des collisions au centre des cases pour éviter des blocages intempestifs
	•	Déplacement en Mode “Tile-Based” :
	•	S’assurer que Pac-Man et les fantômes se déplacent de case en case, avec vérification préalable de l’accessibilité (pas de mur)
	•	Gestion de la fluidité grâce à des offsets pour les animations

Système Audio et Rendu
	•	Rendu Graphique :
	•	Affichage fidèle des sprites et animations rétro (Pac-Man avec 4 frames par direction, fantômes avec 2 frames par état)
	•	Optimisation du rendu (double buffering, batching) pour une performance sur toutes plateformes
	•	Interface utilisateur affichant score, vies, niveau, et messages (ex. « Ready! » pendant 2.5 secondes)
	•	Système Audio :
	•	Intégrer des bruitages fidèles (Waka-waka, sirènes, sons de power-up, etc.) et une musique d’ambiance
	•	Le SoundManager doit gérer le chargement asynchrone, le contrôle des volumes et la synchronisation des sons avec les actions (mouvement, collisions, etc.)

3. Qualité, Optimisation et Bonnes Pratiques
	•	Code et Refactorisation :
	•	Code clair, bien structuré, et fortement commenté
	•	Refactorisation pour éliminer les redondances et améliorer la lisibilité
	•	Utilisation d’algorithmes et structures de données adaptés pour la gestion des collisions, IA et rendu
	•	Optimisation des Performances :
	•	Gestion efficace de la mémoire (chargement et déchargement des ressources via le ResourceManager)
	•	Techniques de caching et optimisation du rendu pour atteindre une synchronisation sur 60 FPS (environ 16,67 ms par frame)
	•	Tests et Validation :
	•	Mise en place de tests unitaires pour les modules critiques (mouvements, collisions, IA des fantômes, scoring)
	•	Tests d’intégration et validation multiplateforme (vérifier la compilation et le bon fonctionnement sur Windows, macOS, Linux)
	•	Profilage et debugging pour identifier et corriger les goulets d’étranglement
	•	Compatibilité & Déploiement :
	•	Fournir un Makefile ou script de build automatisé (ex. CMake)
	•	S’assurer que le produit final est un exécutable ou installateur simple à utiliser pour un utilisateur non-développeur

4. Étapes de Développement
	1.	Configuration Initiale :
	•	Mise en place de la structure du projet, système de build et chargement des ressources via le ResourceManager
	2.	Core Engine :
	•	Création de la boucle de jeu principale, gestion des états (menu, jeu, pause, game over) et implémentation du système de collisions
	3.	Implémentation des Entités :
	•	Développement de Pac-Man avec gestion des entrées (InputHandler)
	•	Implémentation des fantômes et de leur IA, incluant les comportements spécifiques (chase/scatter, modes vulnérable et retour en ghost house)
	•	Conception et rendu du labyrinthe avec ses différents types de cases
	4.	Systèmes Complémentaires :
	•	Intégration du système audio (SoundManager) avec synchronisation précise
	•	Gestion du scoring et de l’affichage de l’interface utilisateur
	5.	Polish et Animation :
	•	Ajout des animations détaillées (Pac-Man, fantômes, intermissions et cutscenes entre certains niveaux)
	•	Optimisation des effets visuels et sonores pour une fidélité arcade
	6.	Tests & Optimisations Finales :
	•	Tests unitaires et d’intégration, profilage et debugging
	•	Validation sur plusieurs plateformes et génération de l’exécutable final

5. Subtilités Historiques et Arcade-Fidélité

Pour une reproduction parfaite de l’expérience originale, intégrez également :
	1.	Comportement “Cruise Elroy” (Blinky) :
	•	Blinky accélère progressivement lorsque Pac-Man mange des pac-gommes (par exemple, dès qu’il reste 20 pac-gommes, sa vitesse augmente et il se “colle” à Pac-Man)
	2.	Reversal Timing (Changements de Mode Inopinés) :
	•	À chaque transition entre les modes chase et scatter, les fantômes effectuent un reversal : arrêt bref suivi d’un demi-tour instantané
	3.	Gestion du Ghost House et de la Porte :
	•	Les fantômes démarrent dans la ghost house centrale et ne sortent qu’après un délai ou une condition (nombre de pac-gommes mangées, chronomètre interne)
	•	La porte de sortie est une case spécifique que seuls les fantômes peuvent traverser
	4.	Cutscenes et Intermissions :
	•	Entre certains niveaux (ex. après le 2e, 5e ou 9e niveau), intégrer de courtes animations (cutscenes) pour renforcer l’immersion arcade
	5.	Level 256 “Kill Screen” :
	•	Optionnel : simuler le bug historique du niveau 256 (corruption d’affichage due à un overflow) ou choisir de le corriger
	6.	Synchronisation à 60 FPS :
	•	S’assurer que le jeu tourne à 60 Hz pour respecter les timings d’animation, de vulnérabilité et de déplacement (frame-perfect)
	7.	Détails sur la “Pinky Bug” :
	•	Reproduire le bug historique de Pinky qui cible 4 cases devant Pac-Man, puis ajoute 4 cases vers le haut (calcul précis à définir selon la direction de Pac-Man)
	8.	Collisions “Pixel-Perfect” :
	•	Définir des hitboxes réduites pour permettre des virages serrés, avec un léger décalage visuel qui permet à Pac-Man de “devancer” les fantômes
	9.	Système de Hasard (RNG) :
	•	Utiliser un générateur pseudo-aléatoire simple et déterministe pour le mode “frightened” des fantômes (similaire à l’arcade original)
	10.	DIP Switch Settings (Optionnel) :
	•	Proposer un menu de configuration permettant de régler la difficulté (nombre de vies de départ, vitesse, etc.), en s’inspirant des DIP switches présents sur les bornes d’arcade

6. Livrables Attendus
	•	Code Source :
	•	Code complet, modulaire et bien documenté (avec commentaires et diagrammes UML)
	•	Système de build multiplateforme (Makefile, CMake ou autre)
	•	Documentation Technique :
	•	README détaillé, guide d’utilisation, instructions de compilation et liste des dépendances
	•	Suite de Tests :
	•	Tests unitaires et d’intégration pour les modules critiques
	•	Assets :
	•	Ressources graphiques et audio optimisées et correctement gérées via le ResourceManager
	•	Produit Final :
	•	Exécutable ou installateur prêt à l’emploi, ne nécessitant aucune manipulation technique de la part de l’utilisateur final

Conclusion

Ce prompt représente l’instruction complète et exhaustive pour créer un jeu Pac-Man rétro d’une fidélité absolue à l’original des années 1980. Il intègre une architecture modulaire, une gestion optimale des ressources, une documentation rigoureuse, et des subtilités de gameplay (IA des fantômes, timings, animations, audio) afin de reproduire fidèlement tous les aspects du jeu arcade, y compris ses comportements historiques et même ses bugs légendaires (Pinky Bug, kill screen).

Le développeur dispose ainsi de toutes les clés pour mener à bien ce projet, garantissant un produit final robuste, performant et parfaitement fidèle à l’expérience arcade originale.

Bonne implémentation !